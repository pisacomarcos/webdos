import { LoaderOptions, Logger } from "@medusajs/types"
import { EntitySchema } from "@mikro-orm/core"
import * as Models from "@models"
import {
  {{moduleNamePascalCase}}ServiceInitializeCustomDataLayerOptions,
  {{moduleNamePascalCase}}ServiceInitializeOptions,
} from "../types"
import { createConnection, loadDatabaseConfig } from "../utils"

/**
 * This script is only valid for mikro orm managers. If a user provide a custom manager
 * he is in charge of reverting the migrations.
 * @param options
 * @param logger
 * @param moduleDeclaration
 */
export async function revertMigration({
  options,
  logger,
}: Pick<
  LoaderOptions<
    | {{moduleNamePascalCase}}ServiceInitializeOptions
    | {{moduleNamePascalCase}}ServiceInitializeCustomDataLayerOptions
  >,
  "options" | "logger"
> = {}) {
  logger ??= console as unknown as Logger

  const dbData = loadDatabaseConfig(options)
  const entities = Object.values(Models) as unknown as EntitySchema[]

  const orm = await createConnection(dbData, entities)

  try {
    const migrator = orm.getMigrator()
    await migrator.down()

    logger?.info("{{moduleNamePascalCase}} module migration executed")
  } catch (error) {
    logger?.error(\`{{moduleNamePascalCase}} module migration failed to run - Error: \${error}\`)
  }

  await orm.close()
}
