import { DAL } from "@medusajs/types"
import {
  LoadStrategy,
  FilterQuery as MikroFilterQuery,
  FindOptions as MikroOptions,
} from "@mikro-orm/core"
import { SqlEntityManager } from "@mikro-orm/postgresql"
import { {{moduleNamePascalCase}} } from "@models"
import { DalUtils } from "@medusajs/utils"

export class {{moduleNamePascalCase}}Repository implements DAL.RepositoryService<{{moduleNamePascalCase}}> {
  protected readonly manager_: SqlEntityManager
  constructor({ manager }) {
    this.manager_ = manager.fork()
  }

  async find(
    findOptions: DAL.FindOptions<{{moduleNamePascalCase}}> = { where: {} },
    context: { transaction?: any } = {}
  ): Promise<{{moduleNamePascalCase}}[]> {
    const findOptions_ = { ...findOptions }

    findOptions_.options ??= {}
    findOptions_.options.limit ??= 15

    if (findOptions_.options.populate) {
      DalUtils.deduplicateIfNecessary(findOptions_.options.populate)
    }

    if (context.transaction) {
      Object.assign(findOptions_.options, { ctx: context.transaction })
    }

    Object.assign(findOptions_.options, {
      strategy: LoadStrategy.SELECT_IN,
    })

    return await this.manager_.find(
      {{moduleNamePascalCase}},
      findOptions_.where as MikroFilterQuery<{{moduleNamePascalCase}}>,
      findOptions_.options as MikroOptions<{{moduleNamePascalCase}}>
    )
  }

  async findAndCount(
    findOptions: DAL.FindOptions<{{moduleNamePascalCase}}> = { where: {} },
    context: { transaction?: any } = {}
  ): Promise<[{{moduleNamePascalCase}}[], number]> {
    const findOptions_ = { ...findOptions }

    findOptions_.options ??= {}
    findOptions_.options.limit ??= 15

    if (findOptions_.options.populate) {
      DalUtils.deduplicateIfNecessary(findOptions_.options.populate)
    }

    if (context.transaction) {
      Object.assign(findOptions_.options, { ctx: context.transaction })
    }

    Object.assign(findOptions_.options, {
      strategy: LoadStrategy.SELECT_IN,
    })

    return await this.manager_.findAndCount(
      {{moduleNamePascalCase}},
      findOptions_.where as MikroFilterQuery<{{moduleNamePascalCase}}>,
      findOptions_.options as MikroOptions<{{moduleNamePascalCase}}>
    )
  }
}
